/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
__export(exports, {
  default: () => FileCleanerPlugin
});
var import_obsidian4 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/translations/helper.ts
var import_obsidian = __toModule(require("obsidian"));

// src/translations/locale/en.ts
var en_default = {
  "Clean files": "Clean files",
  "Regular Options": "Regular Options",
  "Cleaned files": "Cleaned files",
  "What do you want to do with cleaned files?": "What do you want to do with cleaned files?",
  "Move to system trash": "Move to system trash",
  "Move to Obsidian trash (.trash folder)": "Move to Obsidian trash (.trash folder)",
  "Permanently delete": "Permanently delete",
  "Excluded Folders": "Excluded Folders",
  "Files in excluded folders will not be cleaned up. Paths are case-sensitive, each path is separated by a newline. Example: folder/subfolder": "Files in excluded folders will not be cleaned up. Paths are case-sensitive, each path is separated by a newline. Example: folder/subfolder",
  "Clean successful": "Clean successful",
  "No file to clean": "No file to clean"
};

// src/translations/locale/zh-cn.ts
var zh_cn_default = {
  "Clean files": "\u6E05\u7406\u6587\u4EF6",
  "Regular Options": "\u5E38\u89C4\u9009\u9879",
  "Cleaned files": "\u6E05\u7406\u6587\u4EF6",
  "What do you want to do with cleaned files?": "\u8981\u5982\u4F55\u5904\u7406\u5DF2\u6E05\u7406\u7684\u6587\u4EF6\uFF1F",
  "Move to system trash": "\u79FB\u81F3\u7CFB\u7EDF\u56DE\u6536\u7AD9",
  "Move to Obsidian trash (.trash folder)": "\u79FB\u81F3\u8F6F\u4EF6\u56DE\u6536\u7AD9\uFF08.trash \u6587\u4EF6\u5939\uFF09",
  "Permanently delete": "\u6C38\u4E45\u5220\u9664",
  "Excluded Folders": "\u6392\u9664\u6587\u4EF6\u5939",
  "Files in excluded folders will not be cleaned up. Paths are case-sensitive, each path is separated by a newline. Example: folder/subfolder": "\u6392\u9664\u6587\u4EF6\u5939\u4E2D\u7684\u6587\u4EF6\u5C06\u4E0D\u4F1A\u88AB\u6E05\u7406\u3002\u8DEF\u5F84\u533A\u5206\u5927\u5C0F\u5199\uFF0C\u6BCF\u4E2A\u8DEF\u5F84\u7531\u6362\u884C\u7B26\u5206\u9694\u3002\u793A\u4F8B\uFF1A\u6587\u4EF6\u5939/\u5B50\u6587\u4EF6\u5939",
  "Clean successful": "\u6E05\u7406\u6210\u529F",
  "No file to clean": "\u6CA1\u6709\u6587\u4EF6\u9700\u8981\u6E05\u7406"
};

// src/translations/helper.ts
var localeMap = {
  en: en_default,
  "zh-cn": zh_cn_default
};
var locale = localeMap[import_obsidian.moment.locale()];
function t(str) {
  return locale && locale[str] || en_default[str];
}

// src/settings.ts
var DEFAULT_SETTINGS = {
  destination: "system",
  excluded: ""
};
var FileCleanerSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    this.containerEl.empty();
    this.containerEl.createEl("h1", { text: t("Regular Options") });
    new import_obsidian2.Setting(containerEl).setName(t("Cleaned files")).setDesc(t("What do you want to do with cleaned files?")).addDropdown((dropdown) => dropdown.addOption("system", t("Move to system trash")).addOption("obsidian", t("Move to Obsidian trash (.trash folder)")).addOption("permanent", t("Permanently delete")).setValue(this.plugin.settings.destination).onChange((value) => {
      this.plugin.settings.destination = value;
      this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName(t("Excluded Folders")).setDesc(t("Files in excluded folders will not be cleaned up. Paths are case-sensitive, each path is separated by a newline. Example: folder/subfolder")).addTextArea((text) => text.setValue(this.plugin.settings.excluded).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.excluded = value;
      this.plugin.saveSettings();
    })));
  }
};

// src/util.ts
var import_obsidian3 = __toModule(require("obsidian"));
var cleanFiles = (app, setting) => __async(void 0, null, function* () {
  let mdFiles = app.vault.getMarkdownFiles();
  let emptyMdFiles = [];
  let emptyRegex = /\S/;
  for (let file of mdFiles) {
    let content = yield app.vault.cachedRead(file);
    if (file.stat.size === 0) {
      emptyMdFiles.push(file);
    } else if (!emptyRegex.test(content)) {
      emptyMdFiles.push(file);
    }
  }
  let files = app.vault.getFiles();
  const attachmentRegex = /(.jpg|.jpeg|.png|.gif|.svg|.pdf)$/i;
  let attachments = [];
  for (let file of files) {
    if (file.name.match(attachmentRegex)) {
      attachments.push(file);
    }
  }
  let usedAttachments = [];
  let resolvedLinks = app.metadataCache.resolvedLinks;
  if (resolvedLinks) {
    for (const [mdFile, links] of Object.entries(resolvedLinks)) {
      for (const [path, times] of Object.entries(resolvedLinks[mdFile])) {
        let attachmentMatch = path.match(attachmentRegex);
        if (attachmentMatch) {
          let file = app.vault.getAbstractFileByPath(path);
          usedAttachments.push(file);
        }
      }
    }
  }
  let unusedAttachments = attachments.filter((file) => !usedAttachments.includes(file));
  let excludedFiles = [];
  let cleanFiles2 = emptyMdFiles.concat(unusedAttachments);
  let excludedFolders = setting.excluded;
  let excludedFoldersCleaned = new Set(excludedFolders.split(/\n/).map((folderPath) => {
    return folderPath.trim();
  }));
  excludedFoldersCleaned.delete("");
  for (let excludedFolder of excludedFoldersCleaned) {
    let pathRegex = new RegExp("^" + excludedFolder + "/");
    for (let file of cleanFiles2) {
      if (pathRegex.test(file.path)) {
        excludedFiles.push(file);
      }
    }
  }
  cleanFiles2 = cleanFiles2.concat(excludedFiles).filter((v) => !cleanFiles2.includes(v) || !excludedFiles.includes(v));
  let len = cleanFiles2.length;
  if (len > 0) {
    let destination = setting.destination;
    for (let file of cleanFiles2) {
      console.log(file.name + " cleaned");
      if (destination === "permanent") {
        yield app.vault.delete(file);
      } else if (destination === "system") {
        yield app.vault.trash(file, true);
      } else if (destination === "obsidian") {
        yield app.vault.trash(file, false);
      }
    }
    new import_obsidian3.Notice(t("Clean successful"));
  } else {
    new import_obsidian3.Notice(t("No file to clean"));
  }
});

// src/index.ts
var FileCleanerPlugin = class extends import_obsidian4.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addRibbonIcon("trash", t("Clean files"), (evt) => {
        cleanFiles(this.app, this.settings);
      });
      this.addCommand({
        id: "clean-files",
        name: t("Clean files"),
        callback: () => {
          cleanFiles(this.app, this.settings);
        }
      });
      this.addSettingTab(new FileCleanerSettingTab(this.app, this));
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2luZGV4LnRzIiwgInNyYy9zZXR0aW5ncy50cyIsICJzcmMvdHJhbnNsYXRpb25zL2hlbHBlci50cyIsICJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS9lbi50cyIsICJzcmMvdHJhbnNsYXRpb25zL2xvY2FsZS96aC1jbi50cyIsICJzcmMvdXRpbC50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHtcclxuXHRBcHAsXHJcblx0RWRpdG9yLFxyXG5cdE1hcmtkb3duVmlldyxcclxuXHRNb2RhbCxcclxuXHROb3RpY2UsXHJcblx0UGx1Z2luLFxyXG5cdFBsdWdpblNldHRpbmdUYWIsXHJcblx0U2V0dGluZyxcclxuXHRURmlsZSxcclxufSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IHtcclxuXHRGaWxlQ2xlYW5lclNldHRpbmdzLFxyXG5cdERFRkFVTFRfU0VUVElOR1MsXHJcblx0RmlsZUNsZWFuZXJTZXR0aW5nVGFiLFxyXG59IGZyb20gXCIuL3NldHRpbmdzXCI7XHJcbmltcG9ydCB7IGNsZWFuRmlsZXMgfSBmcm9tIFwiLi91dGlsXCI7XHJcbmltcG9ydCB7IHQgfSBmcm9tIFwiLi90cmFuc2xhdGlvbnMvaGVscGVyXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWxlQ2xlYW5lclBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0cGx1Z2luOiBGaWxlQ2xlYW5lclBsdWdpbjtcclxuXHRzZXR0aW5nczogRmlsZUNsZWFuZXJTZXR0aW5ncztcclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcclxuXHJcblx0XHR0aGlzLmFkZFJpYmJvbkljb24oXCJ0cmFzaFwiLCB0KFwiQ2xlYW4gZmlsZXNcIiksIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0Y2xlYW5GaWxlcyh0aGlzLmFwcCwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogXCJjbGVhbi1maWxlc1wiLFxyXG5cdFx0XHRuYW1lOiB0KFwiQ2xlYW4gZmlsZXNcIiksXHJcblx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XHJcblx0XHRcdFx0Y2xlYW5GaWxlcyh0aGlzLmFwcCwgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHRcdH0sXHJcblx0XHR9KTtcclxuXHJcblx0XHR0aGlzLmFkZFNldHRpbmdUYWIobmV3IEZpbGVDbGVhbmVyU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xyXG5cdH1cclxuXHJcblx0b251bmxvYWQoKSB7IH1cclxuXHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oXHJcblx0XHRcdHt9LFxyXG5cdFx0XHRERUZBVUxUX1NFVFRJTkdTLFxyXG5cdFx0XHRhd2FpdCB0aGlzLmxvYWREYXRhKClcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xyXG5cdH1cclxufVxyXG4iLCAiaW1wb3J0IHtcblx0QXBwLFxuXHRFZGl0b3IsXG5cdE1hcmtkb3duVmlldyxcblx0TW9kYWwsXG5cdE5vdGljZSxcblx0UGx1Z2luLFxuXHRQbHVnaW5TZXR0aW5nVGFiLFxuXHRTZXR0aW5nLFxufSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBGaWxlQ2xlYW5lclBsdWdpbiBmcm9tIFwiLlwiO1xuaW1wb3J0IHsgdCB9IGZyb20gXCIuL3RyYW5zbGF0aW9ucy9oZWxwZXJcIjtcblxuLy9cdTVCOUFcdTRFNDlcdThCQkVcdTdGNkVcdTYzQTVcdTUzRTNcbmV4cG9ydCBpbnRlcmZhY2UgRmlsZUNsZWFuZXJTZXR0aW5ncyB7XG5cdGRlc3RpbmF0aW9uOiBzdHJpbmc7XG5cdGV4Y2x1ZGVkOiBzdHJpbmc7XG59XG5cbi8vXHU1QjlBXHU0RTQ5XHU5RUQ4XHU4QkE0XHU4QkJFXHU3RjZFXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogRmlsZUNsZWFuZXJTZXR0aW5ncyA9IHtcblx0ZGVzdGluYXRpb246IFwic3lzdGVtXCIsXG5cdGV4Y2x1ZGVkOiBcIlwiLFxufTtcblxuLy9cdThCQkVcdTdGNkVcdTkwMDlcdTk4NzlcdTUzNjFcbmV4cG9ydCBjbGFzcyBGaWxlQ2xlYW5lclNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBGaWxlQ2xlYW5lclBsdWdpbjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBGaWxlQ2xlYW5lclBsdWdpbikge1xuXHRcdHN1cGVyKGFwcCwgcGx1Z2luKTtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblx0XHR0aGlzLmNvbnRhaW5lckVsLmVtcHR5KCk7XG5cblx0XHR0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDFcIiwgeyB0ZXh0OiB0KFwiUmVndWxhciBPcHRpb25zXCIpIH0pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSh0KFwiQ2xlYW5lZCBmaWxlc1wiKSlcblx0XHRcdC5zZXREZXNjKHQoXCJXaGF0IGRvIHlvdSB3YW50IHRvIGRvIHdpdGggY2xlYW5lZCBmaWxlcz9cIikpXG5cdFx0XHQuYWRkRHJvcGRvd24oKGRyb3Bkb3duKSA9PlxuXHRcdFx0XHRkcm9wZG93blxuXHRcdFx0XHRcdC5hZGRPcHRpb24oXCJzeXN0ZW1cIiwgdChcIk1vdmUgdG8gc3lzdGVtIHRyYXNoXCIpKVxuXHRcdFx0XHRcdC5hZGRPcHRpb24oXG5cdFx0XHRcdFx0XHRcIm9ic2lkaWFuXCIsXG5cdFx0XHRcdFx0XHR0KFwiTW92ZSB0byBPYnNpZGlhbiB0cmFzaCAoLnRyYXNoIGZvbGRlcilcIilcblx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0LmFkZE9wdGlvbihcInBlcm1hbmVudFwiLCB0KFwiUGVybWFuZW50bHkgZGVsZXRlXCIpKVxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZXN0aW5hdGlvbilcblx0XHRcdFx0XHQub25DaGFuZ2UoKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZXN0aW5hdGlvbiA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSlcblx0XHRcdCk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKHQoXCJFeGNsdWRlZCBGb2xkZXJzXCIpKVxuXHRcdFx0LnNldERlc2ModChcIkZpbGVzIGluIGV4Y2x1ZGVkIGZvbGRlcnMgd2lsbCBub3QgYmUgY2xlYW5lZCB1cC4gUGF0aHMgYXJlIGNhc2Utc2Vuc2l0aXZlLCBlYWNoIHBhdGggaXMgc2VwYXJhdGVkIGJ5IGEgbmV3bGluZS4gRXhhbXBsZTogZm9sZGVyL3N1YmZvbGRlclwiKSlcblx0XHRcdC5hZGRUZXh0QXJlYSgodGV4dCkgPT5cblx0XHRcdFx0dGV4dFxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZClcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5leGNsdWRlZCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSlcblx0XHRcdCk7XG5cdH1cbn1cbiIsICJpbXBvcnQgeyBtb21lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBlbiBmcm9tIFwiLi9sb2NhbGUvZW5cIjtcbmltcG9ydCB6aENOIGZyb20gXCIuL2xvY2FsZS96aC1jblwiO1xuXG5jb25zdCBsb2NhbGVNYXA6IHsgW2s6IHN0cmluZ106IFBhcnRpYWw8dHlwZW9mIGVuPiB9ID0ge1xuXHRlbixcblx0XCJ6aC1jblwiOiB6aENOLFxufTtcblxuY29uc3QgbG9jYWxlID0gbG9jYWxlTWFwW21vbWVudC5sb2NhbGUoKV07XG5cbmV4cG9ydCBmdW5jdGlvbiB0KHN0cjoga2V5b2YgdHlwZW9mIGVuKTogc3RyaW5nIHtcblx0cmV0dXJuIChsb2NhbGUgJiYgbG9jYWxlW3N0cl0pIHx8IGVuW3N0cl07XG59XG4iLCAiLy9FbmdsaXNoXG5leHBvcnQgZGVmYXVsdCB7XG5cdFwiQ2xlYW4gZmlsZXNcIjogXCJDbGVhbiBmaWxlc1wiLFxuXG5cdFwiUmVndWxhciBPcHRpb25zXCI6IFwiUmVndWxhciBPcHRpb25zXCIsXG5cdFwiQ2xlYW5lZCBmaWxlc1wiOiBcIkNsZWFuZWQgZmlsZXNcIixcblx0XCJXaGF0IGRvIHlvdSB3YW50IHRvIGRvIHdpdGggY2xlYW5lZCBmaWxlcz9cIjpcblx0XHRcIldoYXQgZG8geW91IHdhbnQgdG8gZG8gd2l0aCBjbGVhbmVkIGZpbGVzP1wiLFxuXHRcIk1vdmUgdG8gc3lzdGVtIHRyYXNoXCI6IFwiTW92ZSB0byBzeXN0ZW0gdHJhc2hcIixcblx0XCJNb3ZlIHRvIE9ic2lkaWFuIHRyYXNoICgudHJhc2ggZm9sZGVyKVwiOlxuXHRcdFwiTW92ZSB0byBPYnNpZGlhbiB0cmFzaCAoLnRyYXNoIGZvbGRlcilcIixcblx0XCJQZXJtYW5lbnRseSBkZWxldGVcIjogXCJQZXJtYW5lbnRseSBkZWxldGVcIixcblx0XCJFeGNsdWRlZCBGb2xkZXJzXCI6IFwiRXhjbHVkZWQgRm9sZGVyc1wiLFxuXHRcIkZpbGVzIGluIGV4Y2x1ZGVkIGZvbGRlcnMgd2lsbCBub3QgYmUgY2xlYW5lZCB1cC4gUGF0aHMgYXJlIGNhc2Utc2Vuc2l0aXZlLCBlYWNoIHBhdGggaXMgc2VwYXJhdGVkIGJ5IGEgbmV3bGluZS4gRXhhbXBsZTogZm9sZGVyL3N1YmZvbGRlclwiOlxuXHRcdFwiRmlsZXMgaW4gZXhjbHVkZWQgZm9sZGVycyB3aWxsIG5vdCBiZSBjbGVhbmVkIHVwLiBQYXRocyBhcmUgY2FzZS1zZW5zaXRpdmUsIGVhY2ggcGF0aCBpcyBzZXBhcmF0ZWQgYnkgYSBuZXdsaW5lLiBFeGFtcGxlOiBmb2xkZXIvc3ViZm9sZGVyXCIsXG5cblx0XCJDbGVhbiBzdWNjZXNzZnVsXCI6IFwiQ2xlYW4gc3VjY2Vzc2Z1bFwiLFxuXHRcIk5vIGZpbGUgdG8gY2xlYW5cIjogXCJObyBmaWxlIHRvIGNsZWFuXCIsXG59O1xuIiwgIi8vXHU3QjgwXHU0RjUzXHU0RTJEXHU2NTg3XG5leHBvcnQgZGVmYXVsdCB7XG5cdFwiQ2xlYW4gZmlsZXNcIjogXCJcdTZFMDVcdTc0MDZcdTY1ODdcdTRFRjZcIixcblxuXHRcIlJlZ3VsYXIgT3B0aW9uc1wiOiBcIlx1NUUzOFx1ODlDNFx1OTAwOVx1OTg3OVwiLFxuXHRcIkNsZWFuZWQgZmlsZXNcIjogXCJcdTZFMDVcdTc0MDZcdTY1ODdcdTRFRjZcIixcblx0XCJXaGF0IGRvIHlvdSB3YW50IHRvIGRvIHdpdGggY2xlYW5lZCBmaWxlcz9cIjogXCJcdTg5ODFcdTU5ODJcdTRGNTVcdTU5MDRcdTc0MDZcdTVERjJcdTZFMDVcdTc0MDZcdTc2ODRcdTY1ODdcdTRFRjZcdUZGMUZcIixcblx0XCJNb3ZlIHRvIHN5c3RlbSB0cmFzaFwiOiBcIlx1NzlGQlx1ODFGM1x1N0NGQlx1N0VERlx1NTZERVx1NjUzNlx1N0FEOVwiLFxuXHRcIk1vdmUgdG8gT2JzaWRpYW4gdHJhc2ggKC50cmFzaCBmb2xkZXIpXCI6IFwiXHU3OUZCXHU4MUYzXHU4RjZGXHU0RUY2XHU1NkRFXHU2NTM2XHU3QUQ5XHVGRjA4LnRyYXNoIFx1NjU4N1x1NEVGNlx1NTkzOVx1RkYwOVwiLFxuXHRcIlBlcm1hbmVudGx5IGRlbGV0ZVwiOiBcIlx1NkMzOFx1NEU0NVx1NTIyMFx1OTY2NFwiLFxuXHRcIkV4Y2x1ZGVkIEZvbGRlcnNcIjogXCJcdTYzOTJcdTk2NjRcdTY1ODdcdTRFRjZcdTU5MzlcIixcblx0XCJGaWxlcyBpbiBleGNsdWRlZCBmb2xkZXJzIHdpbGwgbm90IGJlIGNsZWFuZWQgdXAuIFBhdGhzIGFyZSBjYXNlLXNlbnNpdGl2ZSwgZWFjaCBwYXRoIGlzIHNlcGFyYXRlZCBieSBhIG5ld2xpbmUuIEV4YW1wbGU6IGZvbGRlci9zdWJmb2xkZXJcIjpcblx0XHRcIlx1NjM5Mlx1OTY2NFx1NjU4N1x1NEVGNlx1NTkzOVx1NEUyRFx1NzY4NFx1NjU4N1x1NEVGNlx1NUMwNlx1NEUwRFx1NEYxQVx1ODhBQlx1NkUwNVx1NzQwNlx1MzAwMlx1OERFRlx1NUY4NFx1NTMzQVx1NTIwNlx1NTkyN1x1NUMwRlx1NTE5OVx1RkYwQ1x1NkJDRlx1NEUyQVx1OERFRlx1NUY4NFx1NzUzMVx1NjM2Mlx1ODg0Q1x1N0IyNlx1NTIwNlx1OTY5NFx1MzAwMlx1NzkzQVx1NEY4Qlx1RkYxQVx1NjU4N1x1NEVGNlx1NTkzOS9cdTVCNTBcdTY1ODdcdTRFRjZcdTU5MzlcIixcblxuXHRcIkNsZWFuIHN1Y2Nlc3NmdWxcIjogXCJcdTZFMDVcdTc0MDZcdTYyMTBcdTUyOUZcIixcblx0XCJObyBmaWxlIHRvIGNsZWFuXCI6IFwiXHU2Q0ExXHU2NzA5XHU2NTg3XHU0RUY2XHU5NzAwXHU4OTgxXHU2RTA1XHU3NDA2XCIsXG59O1xuIiwgImltcG9ydCB7XG5cdEFwcCxcblx0RWRpdG9yLFxuXHRNYXJrZG93blZpZXcsXG5cdE1vZGFsLFxuXHROb3RpY2UsXG5cdFBsdWdpbixcblx0UGx1Z2luU2V0dGluZ1RhYixcblx0U2V0dGluZyxcblx0VEZpbGUsXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgRmlsZUNsZWFuZXJTZXR0aW5ncyB9IGZyb20gXCIuL3NldHRpbmdzXCI7XG5pbXBvcnQgeyB0IH0gZnJvbSBcIi4vdHJhbnNsYXRpb25zL2hlbHBlclwiO1xuXG5leHBvcnQgY29uc3QgY2xlYW5GaWxlcyA9IGFzeW5jIChhcHA6IEFwcCwgc2V0dGluZzogRmlsZUNsZWFuZXJTZXR0aW5ncykgPT4ge1xuXHQvLyBcdTgzQjdcdTUzRDZcdTdBN0FcdTc2N0RNYXJrZG93blx1NjU4N1x1NEVGNlxuXHRsZXQgbWRGaWxlcyA9IGFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cdGxldCBlbXB0eU1kRmlsZXM6IFRGaWxlW10gPSBbXTtcblx0bGV0IGVtcHR5UmVnZXggPSAvXFxTLztcblx0Zm9yIChsZXQgZmlsZSBvZiBtZEZpbGVzKSB7XG5cdFx0bGV0IGNvbnRlbnQgPSBhd2FpdCBhcHAudmF1bHQuY2FjaGVkUmVhZChmaWxlKTtcblx0XHRpZiAoZmlsZS5zdGF0LnNpemUgPT09IDApIHtcblx0XHRcdGVtcHR5TWRGaWxlcy5wdXNoKGZpbGUpO1xuXHRcdH0gZWxzZSBpZiAoIWVtcHR5UmVnZXgudGVzdChjb250ZW50KSkge1xuXHRcdFx0ZW1wdHlNZEZpbGVzLnB1c2goZmlsZSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gXHU4M0I3XHU1M0Q2XHU2NzJBXHU0RjdGXHU3NTI4XHU5NjQ0XHU0RUY2XG5cdGxldCBmaWxlcyA9IGFwcC52YXVsdC5nZXRGaWxlcygpO1xuXHRjb25zdCBhdHRhY2htZW50UmVnZXggPSAvKC5qcGd8LmpwZWd8LnBuZ3wuZ2lmfC5zdmd8LnBkZikkL2k7XG5cdGxldCBhdHRhY2htZW50czogVEZpbGVbXSA9IFtdO1xuXHRmb3IgKGxldCBmaWxlIG9mIGZpbGVzKSB7XG5cdFx0aWYgKGZpbGUubmFtZS5tYXRjaChhdHRhY2htZW50UmVnZXgpKSB7XG5cdFx0XHRhdHRhY2htZW50cy5wdXNoKGZpbGUpO1xuXHRcdH1cblx0fVxuXG5cdGxldCB1c2VkQXR0YWNobWVudHM6IGFueSA9IFtdO1xuXHRsZXQgcmVzb2x2ZWRMaW5rcyA9IGFwcC5tZXRhZGF0YUNhY2hlLnJlc29sdmVkTGlua3M7XG5cdGlmIChyZXNvbHZlZExpbmtzKSB7XG5cdFx0Zm9yIChjb25zdCBbbWRGaWxlLCBsaW5rc10gb2YgT2JqZWN0LmVudHJpZXMocmVzb2x2ZWRMaW5rcykpIHtcblx0XHRcdGZvciAoY29uc3QgW3BhdGgsIHRpbWVzXSBvZiBPYmplY3QuZW50cmllcyhyZXNvbHZlZExpbmtzW21kRmlsZV0pKSB7XG5cdFx0XHRcdGxldCBhdHRhY2htZW50TWF0Y2ggPSBwYXRoLm1hdGNoKGF0dGFjaG1lbnRSZWdleCk7XG5cdFx0XHRcdGlmIChhdHRhY2htZW50TWF0Y2gpIHtcblx0XHRcdFx0XHRsZXQgZmlsZSA9IGFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgocGF0aCk7XG5cdFx0XHRcdFx0dXNlZEF0dGFjaG1lbnRzLnB1c2goZmlsZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRsZXQgdW51c2VkQXR0YWNobWVudHMgPSBhdHRhY2htZW50cy5maWx0ZXIoXG5cdFx0KGZpbGUpID0+ICF1c2VkQXR0YWNobWVudHMuaW5jbHVkZXMoZmlsZSlcblx0KTtcblxuXHQvLyBcdTgzQjdcdTUzRDZcdTYzOTJcdTk2NjRcdTY1ODdcdTRFRjZcblx0bGV0IGV4Y2x1ZGVkRmlsZXM6IFRGaWxlW10gPSBbXVxuXHRsZXQgY2xlYW5GaWxlcyA9IGVtcHR5TWRGaWxlcy5jb25jYXQodW51c2VkQXR0YWNobWVudHMpXG5cdGxldCBleGNsdWRlZEZvbGRlcnMgPSBzZXR0aW5nLmV4Y2x1ZGVkO1xuXHRsZXQgZXhjbHVkZWRGb2xkZXJzQ2xlYW5lZCA9IG5ldyBTZXQoXG5cdFx0ZXhjbHVkZWRGb2xkZXJzLnNwbGl0KC9cXG4vKS5tYXAoKGZvbGRlclBhdGgpID0+IHtcblx0XHRcdHJldHVybiBmb2xkZXJQYXRoLnRyaW0oKTtcblx0XHR9KVxuXHQpO1xuXHRleGNsdWRlZEZvbGRlcnNDbGVhbmVkLmRlbGV0ZShcIlwiKTtcblx0Zm9yIChsZXQgZXhjbHVkZWRGb2xkZXIgb2YgZXhjbHVkZWRGb2xkZXJzQ2xlYW5lZCkge1xuXHRcdGxldCBwYXRoUmVnZXggPSBuZXcgUmVnRXhwKFwiXlwiICsgZXhjbHVkZWRGb2xkZXIgKyBcIi9cIik7XG5cdFx0Zm9yIChsZXQgZmlsZSBvZiBjbGVhbkZpbGVzKSB7XG5cdFx0XHRpZiAocGF0aFJlZ2V4LnRlc3QoZmlsZS5wYXRoKSkge1xuXHRcdFx0XHRleGNsdWRlZEZpbGVzLnB1c2goZmlsZSlcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBcdTYyNjdcdTg4NENcdTZFMDVcdTc0MDZcblx0Y2xlYW5GaWxlcyA9IGNsZWFuRmlsZXMuY29uY2F0KGV4Y2x1ZGVkRmlsZXMpLmZpbHRlcih2ID0+ICFjbGVhbkZpbGVzLmluY2x1ZGVzKHYpIHx8ICFleGNsdWRlZEZpbGVzLmluY2x1ZGVzKHYpKVxuXHRsZXQgbGVuID0gY2xlYW5GaWxlcy5sZW5ndGg7XG5cdGlmIChsZW4gPiAwKSB7XG5cdFx0bGV0IGRlc3RpbmF0aW9uID0gc2V0dGluZy5kZXN0aW5hdGlvbjtcblx0XHRmb3IgKGxldCBmaWxlIG9mIGNsZWFuRmlsZXMpIHtcblx0XHRcdGNvbnNvbGUubG9nKGZpbGUubmFtZSArIFwiIGNsZWFuZWRcIik7XG5cdFx0XHRpZiAoZGVzdGluYXRpb24gPT09IFwicGVybWFuZW50XCIpIHtcblx0XHRcdFx0YXdhaXQgYXBwLnZhdWx0LmRlbGV0ZShmaWxlKTtcblx0XHRcdH0gZWxzZSBpZiAoZGVzdGluYXRpb24gPT09IFwic3lzdGVtXCIpIHtcblx0XHRcdFx0YXdhaXQgYXBwLnZhdWx0LnRyYXNoKGZpbGUsIHRydWUpO1xuXHRcdFx0fSBlbHNlIGlmIChkZXN0aW5hdGlvbiA9PT0gXCJvYnNpZGlhblwiKSB7XG5cdFx0XHRcdGF3YWl0IGFwcC52YXVsdC50cmFzaChmaWxlLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdG5ldyBOb3RpY2UodChcIkNsZWFuIHN1Y2Nlc3NmdWxcIikpO1xuXHR9IGVsc2Uge1xuXHRcdG5ldyBOb3RpY2UodChcIk5vIGZpbGUgdG8gY2xlYW5cIikpO1xuXHR9XG59O1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7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
