/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const LC = "[\\w\\u0400-\\u04FF]"; // Latin and Cyrillic
function capitalizeWord(str) {
    var rx = new RegExp(LC + "\\S*", "g");
    return str.replace(rx, function (t) {
        return t.charAt(0).toUpperCase() + t.substr(1);
    });
}
function capitalizeSentence(s) {
    let lcp = LC + "+"; // LC plus
    var rx = new RegExp("(^|\\n|(?<=[\"']))" + lcp + "|(?<=[\\.!?~]\\s+)" + lcp + "|(?<=- )" + lcp, "g");
    // return s.replace(/^\S|(?<=[\.!?\n~]\s+)\S/g, function (t) {
    return s.replace(rx, function (t) {
        console.log(t);
        // return t.toUpperCase();
        if (/^(ve|t|m|d|ll|s|re)$/.test(t)) {
            return t;
        }
        else {
            console.log("aha!!!!");
            return t.charAt(0).toUpperCase() + t.substr(1);
        }
    });
}
function removeAllSpaces(s) {
    return s.replace(/(?<![\)\]:#-]) | $/g, "");
}
function zoteroNote(text, regexp, template) {
    let template_regexp = new RegExp(regexp);
    let result = template_regexp.exec(text);
    if (result) {
        let z = result.groups;
        let text = result.groups.text.replace(/\\\[\d+\\\]/g, (t) => t.replace("\\[", "[").replace("\\]", "]"));
        console.log(template);
        // @ts-ignore
        return template.format({
            text: text,
            item: z.item,
            pdf_url: z.pdf_url,
        });
    }
    else {
        return ``;
    }
}
function table2bullet(content, header = false) {
    let header_str = "";
    let output = "";
    content = content.replace(/[\S ]+\n[:\-\| ]+[:\-]+\|\n/g, (t) => {
        header_str = t
            .match(/^[\S ]+/)[0]
            .replace(/ *\| *$|^ *\| */g, "")
            .replace(/ *\| */g, "|");
        return "";
    });
    let headers = header_str.split("|");
    for (let i = 0; i < headers.length; i++) {
        headers[i] = header ? `${headers[i]}: ` : "";
    }
    content.split("\n").forEach((line) => {
        let items = line.replace(/\| *$|^ *\|/g, "").split("|");
        output += `- ${items[0].trim()}\n`;
        for (let i = 1; i < items.length; i++) {
            output += `    - ${headers[i]}${items[i].trim()}\n`;
        }
    });
    return output;
}
function array2markdown(content) {
    let volume = content.match(/(?<=\{)[clr]+(?=\})/)[0].length;
    content = content
        .replace(/\$|\n/g, ``)
        .replace(/\\text *\{.*?\}/g, (t) => t.match(/(?<=\{).*?(?=\})/g)[0].replace(/^ +| +$/g, ``));
    // single line
    content = content.replace(/\\begin\{array\}\{[clr]\}.*?\\end\{array\}/g, (t) => t
        .replace(/\\\\begin\{array\}\{[clr]\}/g, "")
        .replace("\\end{array}", "")
        .replace(/\\\\ /g, ""));
    // \n
    content = content.replace(/\\\\ \\hline|\\\\ */g, (t) => t + `\n`);
    // convert to table
    let markdown = ("|" +
        content
            .replace(/\\begin\{array\}\{[clr]+\}|\\end\{array\}|\\hline/g, "")
            .replace(/&/g, "|")
            .replace(/\n[ ]*$/, "")
            .replace(/\\\\[ ]*?\n/g, "|\n|")
            .replace("\\\\", "|")).replace("\n", "\n" + "|:-:".repeat(volume) + "|\n");
    let beautify_markdown = markdown
        .replace(/\[[\d,]+?\]/g, "")
        .replace(/\\[\w\{\}\d]+/g, (t) => `$${t}$`);
    return beautify_markdown;
}
/* To Title Case © 2018 David Gouch | https://github.com/gouch/to-title-case */
// eslint-disable-next-line no-extend-native
// @ts-ignore
String.prototype.toTitleCase = function () {
    var smallWords = /^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|v.?|vs.?|via)$/i;
    var alphanumericPattern = /([A-Za-z0-9\u00C0-\u00FF])/;
    var wordSeparators = /([ :–—-])/;
    return this.split(wordSeparators)
        .map(function (current, index, array) {
        if (
        /* Check for small words */
        current.search(smallWords) > -1 &&
            /* Skip first and last word */
            index !== 0 &&
            index !== array.length - 1 &&
            /* Ignore title end and subtitle start */
            array[index - 3] !== ":" &&
            array[index + 1] !== ":" &&
            /* Ignore small words that start a hyphenated phrase */
            (array[index + 1] !== "-" ||
                (array[index - 1] === "-" && array[index + 1] === "-"))) {
            return current.toLowerCase();
        }
        /* Ignore intentional capitalization */
        if (current.substr(1).search(/[A-Z]|\../) > -1) {
            return current;
        }
        /* Ignore URLs */
        if (array[index + 1] === ":" && array[index + 2] !== "") {
            return current;
        }
        /* Capitalize the first letter */
        return current.replace(alphanumericPattern, function (match) {
            return match.toUpperCase();
        });
    })
        .join("");
};
String.prototype.format = function (args) {
    var result = this;
    if (arguments.length > 0) {
        if (arguments.length == 1 && typeof args == "object") {
            for (var key in args) {
                if (args[key] != undefined) {
                    var reg = new RegExp("({" + key + "})", "g");
                    result = result.replace(reg, args[key]);
                }
            }
        }
        else {
            for (var i = 0; i < arguments.length; i++) {
                if (arguments[i] != undefined) {
                    var reg = new RegExp("({)" + i + "(})", "g");
                    result = result.replace(reg, arguments[i]);
                }
            }
        }
    }
    return result;
};
function textWrapper(prefix, suffix, app) {
    const PL = prefix.length; // Prefix Length
    const SL = suffix.length; // Suffix Length
    let markdownView = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (!markdownView) {
        return;
    }
    let editor = markdownView.editor;
    let selectedText = editor.somethingSelected() ? editor.getSelection() : "";
    let last_cursor = editor.getCursor(); // the cursor that at the last position of doc
    last_cursor.line = editor.lastLine();
    last_cursor.ch = editor.getLine(last_cursor.line).length;
    const last_offset = editor.posToOffset(last_cursor);
    function Cursor(offset) {
        if (offset > last_offset) {
            return last_cursor;
        }
        offset = offset < 0 ? 0 : offset;
        return editor.offsetToPos(offset);
    }
    /* Detect whether the selected text is packed by <u></u>.
       If true, unpack it, else pack with <u></u>. */
    const fos = editor.posToOffset(editor.getCursor("from")); // from offset
    const tos = editor.posToOffset(editor.getCursor("to")); // to offset
    const len = selectedText.length;
    var beforeText = editor.getRange(Cursor(fos - PL), Cursor(tos - len));
    var afterText = editor.getRange(Cursor(fos + len), Cursor(tos + SL));
    var startText = editor.getRange(Cursor(fos), Cursor(fos + PL));
    var endText = editor.getRange(Cursor(tos - SL), Cursor(tos));
    if (beforeText === prefix && afterText === suffix) {
        //=> undo underline (inside selection)
        editor.setSelection(Cursor(fos - PL), Cursor(tos + SL));
        editor.replaceSelection(`${selectedText}`);
        // re-select
        editor.setSelection(Cursor(fos - PL), Cursor(tos - PL));
    }
    else if (startText === prefix && endText === suffix) {
        //=> undo underline (outside selection)
        editor.replaceSelection(editor.getRange(Cursor(fos + PL), Cursor(tos - SL)));
        // re-select
        editor.setSelection(Cursor(fos), Cursor(tos - PL - SL));
    }
    else {
        //=> do underline
        if (selectedText) {
            // console.log("selected");
            editor.replaceSelection(`${prefix}${selectedText}${suffix}`);
            // re-select
            editor.setSelection(editor.offsetToPos(fos + PL), editor.offsetToPos(tos + PL));
        }
        else {
            // console.log("not selected");
            editor.replaceSelection(`${prefix}${suffix}`);
            let cursor = editor.getCursor();
            cursor.ch -= SL;
            editor.setCursor(cursor);
        }
    }
}

function removeWikiLink(s) {
    let rx = /\[\[.*?\]\]/g;
    return s.replace(rx, function (t) {
        return t.substring(2, t.length - 2);
    });
}
function removeUrlLink(s) {
    let rx = /\[.*?\]\(.+?\)/g;
    return s.replace(rx, function (t) {
        return t.match(/\[(.*?)\]/)[1];
    });
}
function url2WikiLink(s) {
    let rx = /\[.*?\]\(.+?\)/g;
    return s.replace(rx, function (t) {
        return `[[${t.match(/\[(.*?)\]/)[1]}]]`;
    });
}

const DEFAULT_SETTINGS = {
    MergeParagraph_Newlines: true,
    MergeParagraph_Spaces: true,
    LowercaseFirst: false,
    RemoveBlanksWhenChinese: false,
    ZoteroNoteRegExp: String.raw `“(?<text>.*)” \((?<item>.*?)\) \(\[pdf\]\((?<pdf_url>.*?)\)\)`,
    ZoteroNoteTemplate: "{text} [🔖]({pdf_url})",
    wrapperList: [{ name: "", prefix: "", suffix: "" }],
};
class TextFormatSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl("h3", { text: "Lowercase" });
        new obsidian.Setting(containerEl)
            .setName("Lowercase before capitalize/title case")
            .setDesc("When running the capitalize or title case command, the plugin will lowercase the selection at first.")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.LowercaseFirst)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.LowercaseFirst = value;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl("h3", { text: "Merge broken paragraphs behavior" });
        new obsidian.Setting(containerEl)
            .setName("Remove redundant blank lines")
            .setDesc('change blank lines into single blank lines, e.g. "\\n\\n\\n" will be changed to "\\n\\n"')
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.MergeParagraph_Newlines)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.MergeParagraph_Newlines = value;
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Remove redundant blank spaces")
            .setDesc("ensure only one space between words")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.MergeParagraph_Spaces)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.MergeParagraph_Spaces = value;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl("h3", { text: "When converting Chinese characters" });
        new obsidian.Setting(containerEl)
            .setName("Remove all spaces")
            .setDesc("for OCR case")
            .addToggle((toggle) => {
            toggle
                .setValue(this.plugin.settings.RemoveBlanksWhenChinese)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.RemoveBlanksWhenChinese = value;
                yield this.plugin.saveSettings();
            }));
        });
        containerEl.createEl("h3", { text: "Wrapper" });
        const descEl = document.createDocumentFragment();
        const ruleDesc = document.createDocumentFragment();
        ruleDesc.append("<Wrapper Name> <Prefix> <Suffix>", descEl.createEl("br"), "Note: To make sure the command is valid in Command Palette, you need to reload/reopen Obsidian.");
        new obsidian.Setting(this.containerEl)
            .setName("Add new wrapper")
            .setDesc(ruleDesc)
            .addButton((button) => {
            button
                .setTooltip("Add new rule")
                .setButtonText("+")
                .setCta()
                .onClick(() => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.wrapperList.push({
                    name: "",
                    prefix: "",
                    suffix: "",
                });
                yield this.plugin.saveSettings();
                this.display();
            }));
        });
        this.plugin.settings.wrapperList.forEach((wrapperSetting, index) => {
            new obsidian.Setting(this.containerEl)
                .addSearch((cb) => {
                cb.setPlaceholder("Wrapper Name")
                    .setValue(wrapperSetting.name)
                    .onChange((newValue) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.wrapperList[index].name = newValue;
                    yield this.plugin.saveSettings();
                }));
            })
                .addSearch((cb) => {
                cb.setPlaceholder("Prefix")
                    .setValue(wrapperSetting.prefix)
                    .onChange((newValue) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.wrapperList[index].prefix = newValue;
                    yield this.plugin.saveSettings();
                }));
            })
                .addSearch((cb) => {
                cb.setPlaceholder("Suffix")
                    .setValue(wrapperSetting.suffix)
                    .onChange((newValue) => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.wrapperList[index].suffix = newValue;
                    yield this.plugin.saveSettings();
                }));
            })
                .addExtraButton((cb) => {
                cb.setIcon("cross")
                    .setTooltip("Delete")
                    .onClick(() => __awaiter(this, void 0, void 0, function* () {
                    this.plugin.settings.wrapperList.splice(index, 1);
                    yield this.plugin.saveSettings();
                    this.display();
                }));
            });
        });
        containerEl.createEl("h3", { text: "Zotero pdf note format" });
        new obsidian.Setting(containerEl)
            .setName("Zotero pdf note (input) RegExp")
            .setDesc("The format of note template can configured refer to https://www.zotero.org/support/note_templates. \n" +
            "Variables: \n" +
            "<text>: highlight,\n" +
            "<pdf_url>: comment,\n" +
            "<item>: citation.")
            .addTextArea((text) => text
            .setPlaceholder(String.raw `“(?<text>.*)” \((?<item>.*?)\) \(\[pdf\]\((?<pdf_url>.*?)\)\)`)
            .setValue(this.plugin.settings.ZoteroNoteRegExp)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.ZoteroNoteRegExp = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Zotero note pasted in Obsidian (output) format")
            .setDesc("Variables: \n" +
            "{text}: <text>,\n" +
            "{pdf_url}: <pdf_url>,\n" +
            "{item}: <item>.")
            .addTextArea((text) => text
            .setPlaceholder("{text} [🔖]({pdf_url})")
            .setValue(this.plugin.settings.ZoteroNoteTemplate)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.ZoteroNoteTemplate = value;
            yield this.plugin.saveSettings();
        })));
    }
}

class TextFormat extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new TextFormatSettingTab(this.app, this));
            /*
            // https://marcus.se.net/obsidian-plugin-docs/user-interface/context-menus
            this.app.workspace.on("editor-menu", (menu) => {
              menu.addSeparator();
              menu.addItem((item) => {
                item
                  .setTitle("lowercase selection")
                  .setIcon("documents")
                  .onClick(() => {
                    this.textFormat("lowercase");
                  });
                // .setSection("danger");
                console.log("ooooo");
                console.log(item);
              });
              console.log(menu);
            });
            */
            this.settings.wrapperList.forEach((wrapper, index) => {
                this.addCommand({
                    id: `text-format-wrapper-${index}`,
                    name: wrapper.name,
                    callback: () => textWrapper(wrapper.prefix, wrapper.suffix, app),
                });
            });
            this.addCommand({
                id: "text-format-remove-wiki-link",
                name: "Remove WikiLinks format in selection",
                callback: () => this.textFormat("remove-wiki-link"),
            });
            this.addCommand({
                id: "text-format-remove-url-link",
                name: "Remove URL links format in selection",
                callback: () => this.textFormat("remove-url-link"),
            });
            this.addCommand({
                id: "text-format-link-url2wiki",
                name: "Convert URL links to WikiLinks in selection",
                callback: () => this.textFormat("link-url2wiki"),
            });
            this.addCommand({
                id: "text-format-lower",
                name: "Lowercase selected text",
                callback: () => this.textFormat("lowercase"),
            });
            this.addCommand({
                id: "text-format-upper",
                name: "Uppercase selected text",
                callback: () => this.textFormat("uppercase"),
            });
            this.addCommand({
                id: "text-format-capitalize-word",
                name: "Capitalize all words in selected text",
                callback: () => this.textFormat("capitalize-word"),
            });
            this.addCommand({
                id: "text-format-capitalize-sentence",
                name: "Capitalize only first word of sentence in selected text",
                callback: () => this.textFormat("capitalize-sentence"),
            });
            this.addCommand({
                id: "text-format-titlecase",
                name: "Title case selected text",
                callback: () => this.textFormat("titlecase"),
            });
            this.addCommand({
                id: "text-format-remove-spaces",
                name: "Remove redundant spaces in selection",
                callback: () => this.textFormat("remove-spaces"),
            });
            this.addCommand({
                id: "text-format-remove-spaces-all",
                name: "Remove all spaces in selection",
                callback: () => this.textFormat("spaces-all"),
            });
            this.addCommand({
                id: "text-format-remove-blank-line",
                name: "Remove blank line(s)",
                callback: () => this.textFormat("remove-blank-line"),
            });
            this.addCommand({
                id: "text-format-merge-line",
                name: "Merge broken paragraph(s) in selection",
                callback: () => this.textFormat("merge"),
            });
            this.addCommand({
                id: "text-format-bullet-list",
                name: "Format bullet list",
                callback: () => this.textFormat("bullet"),
            });
            this.addCommand({
                id: "text-format-convert-ordered-list",
                name: "Format ordered list",
                callback: () => this.textFormat("convert-ordered"),
            });
            this.addCommand({
                id: "text-format-split-blank",
                name: "Split line(s) by blanks",
                callback: () => this.textFormat("split-blank"),
            });
            this.addCommand({
                id: "text-format-chinese-character",
                name: "Convert to Chinese character (,;:!?)",
                callback: () => this.textFormat("Chinese"),
            });
            this.addCommand({
                id: "text-format-latex-single-letter",
                name: "Convert single letter into math mode",
                callback: () => this.textFormat("latex-letter"),
            });
            this.addCommand({
                id: "text-format-decodeURI",
                name: "Decode URL",
                callback: () => this.textFormat("decodeURI"),
            });
            this.addCommand({
                id: "text-format-paragraph-double-spaces",
                name: "Add extra double spaces per paragraph for whole file (beta)",
                callback: () => this.extraDoubleSpaces(),
            });
            this.addCommand({
                id: "text-format-add-line-break",
                name: "Add extra line break to paragraph",
                callback: () => this.textFormat("add-line-break"),
            });
            this.addCommand({
                id: "text-format-hyphen",
                name: "Remove hyphens",
                callback: () => this.textFormat("hyphen"),
            });
            this.addCommand({
                id: "text-format-mathpix-array2table",
                name: "Convert Mathpix array to markdown table",
                callback: () => this.textFormat("array2table"),
            });
            this.addCommand({
                id: "text-format-table2bullet",
                name: "Convert table to bullet list",
                callback: () => this.textFormat("table2bullet"),
            });
            this.addCommand({
                id: "text-format-table2bullet-head",
                name: "Convert table to bullet list with header",
                callback: () => this.textFormat("table2bullet-header"),
            });
            this.addCommand({
                id: "text-format-zotero-note",
                name: "Zotero note format and paste",
                callback: () => __awaiter(this, void 0, void 0, function* () {
                    const clipboardText = yield navigator.clipboard.readText();
                    let text = zoteroNote(clipboardText, this.settings.ZoteroNoteRegExp, this.settings.ZoteroNoteTemplate);
                    let markdownView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                    if (!markdownView) {
                        return;
                    }
                    let editor = markdownView.editor;
                    editor.replaceSelection(text);
                }),
            });
        });
    }
    extraDoubleSpaces() {
        let markdownView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!markdownView) {
            return;
        }
        let editor = markdownView.editor;
        let content = editor.getValue();
        content = content.replace(/(?<=(^---\n[\s\S]*?\n---\n|^))[\s\S]+$/g, function (match) {
            return match.replace(/(?<=\n).*[^-\n]+.*(?=\n)/g, function (t) {
                return `${t}  `;
            });
        });
        editor.setValue(content);
    }
    textFormat(cmd) {
        let markdownView = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
        if (!markdownView) {
            return;
        }
        let editor = markdownView.editor;
        var selectedText, replacedText;
        // if nothing is selected, select the whole line.
        if (!editor.somethingSelected()) {
            let cursor = editor.getCursor();
            cursor.ch = 0;
            let aos = editor.posToOffset(cursor);
            cursor.line += 1;
            let hos = editor.posToOffset(cursor);
            if (cursor.line <= editor.lastLine()) {
                // don't select the next line which is not selected by user
                hos -= 1;
            }
            editor.setSelection(editor.offsetToPos(aos), editor.offsetToPos(hos));
        }
        selectedText = editor.getSelection();
        // adjust selection
        switch (cmd) {
            case "capitalize-word":
            case "capitalize-sentence":
            case "titlecase":
                // lower case text if setting is true
                if (this.settings.LowercaseFirst) {
                    selectedText = selectedText.toLowerCase();
                }
                else {
                    selectedText = selectedText;
                }
                break;
            case "split-blank":
            case "bullet":
            case "ordered":
                let from = editor.getCursor("from");
                let to = editor.getCursor("to");
                from.ch = 0;
                to.line += 1;
                to.ch = 0;
                if (to.line <= editor.lastLine()) {
                    editor.setSelection(from, editor.offsetToPos(editor.posToOffset(to) - 1));
                }
                else {
                    editor.setSelection(from, to);
                }
                selectedText = editor.getSelection();
                break;
        }
        // modify selection text
        switch (cmd) {
            case "lowercase":
                replacedText = selectedText.toLowerCase();
                break;
            case "uppercase":
                replacedText = selectedText.toUpperCase();
                break;
            case "capitalize-word":
                replacedText = capitalizeWord(selectedText);
                break;
            case "capitalize-sentence":
                replacedText = capitalizeSentence(selectedText);
                break;
            case "titlecase":
                // @ts-ignore
                replacedText = selectedText.toTitleCase();
                break;
            case "remove-spaces":
                replacedText = selectedText
                    .replace(/ +/g, " ")
                    .replace(/ $| (?=\n)/g, "");
                // replacedText = replacedText.replace(/\n /g, "\n"); // when a single space left at the head of the line
                break;
            case "spaces-all":
                replacedText = removeAllSpaces(selectedText);
                break;
            case "merge":
                replacedText = selectedText.replace(/(?<!\n)\n(?!\n)/g, " ");
                // console.log(this.settings);
                if (this.settings.MergeParagraph_Newlines) {
                    replacedText = replacedText.replace(/\n\n+/g, "\n\n");
                }
                if (this.settings.MergeParagraph_Spaces) {
                    replacedText = replacedText.replace(/ +/g, " ");
                }
                break;
            case "remove-blank-line":
                replacedText = selectedText.replace(/\n\s*\n/g, "\n"); // issue #16
                break;
            case "add-line-break":
                replacedText = selectedText.replace(/\n/g, "\n\n");
                break;
            case "bullet":
                let r = "•–§";
                replacedText = selectedText
                    .replace(RegExp(`\\s*[${r}] *`, "g"), (t) => t.replace(RegExp(`[${r}] *`), "\n- "))
                    .replace(/\n+/g, "\n")
                    .replace(/^\n/, "");
                break;
            // case "toggle-ordered":
            //   break;
            case "convert-ordered":
                let orderedCount = 0;
                var rx = new RegExp(String.raw `(^|\s| and )[^\s\(\[\]]\)` +
                    "|" +
                    /* (?<=^|\s)
                      (
                        [0-9]\.
                        |
                        [:;]?\w+[）\)]
                      ) */
                    String.raw `(?<=^|[\s，。])([:;]?(\d|[i]{1,4})[）\)]|[0-9]\.)`, "g");
                replacedText = selectedText.replace(rx, 
                // /(^|\s)[^\s\[\(\]]+\)|[:;]?\w+[）\)]|(?<=^|\s)[0-9]\./g,
                function (t) {
                    orderedCount++;
                    // console.log(orderedCount, t);
                    let head = "\n"; // if single line, then add newline character.
                    if (selectedText.indexOf("\n") > -1) {
                        head = "";
                    }
                    return head + String(orderedCount) + ". ";
                });
                replacedText = replacedText.replace(/\n+/g, "\n").replace(/^\n/, "");
                break;
            case "split-blank":
                replacedText = selectedText.replace(/ /g, "\n");
                break;
            case "Chinese":
                if (this.settings.RemoveBlanksWhenChinese) {
                    selectedText = removeAllSpaces(selectedText);
                }
                replacedText = selectedText
                    .replace(/ ?, ?/g, "，")
                    .replace(/(?<!\d) ?\. ?/g, "。")
                    .replace(/ ?、 ?/g, "、")
                    .replace(/;/g, "；")
                    .replace(/--/g, "——")
                    .replace(/(?<=[^a-zA-Z0-9]):/g, "：")
                    .replace(/\!(?=[^\[])/g, "！")
                    .replace(/\?/g, "？")
                    .replace(/\([^\)]*?[\u4e00-\u9fa5]+?[^\)]*?\)/g, function (t) {
                    return `（${t.slice(1, t.length - 1)}）`;
                });
                break;
            case "latex-letter":
                replacedText = selectedText.replace(/(?<= )[b-zA-Z](?=[ ,\.?!，。、])/g, function (t) {
                    return `$${t}$`;
                });
                break;
            case "decodeURI":
                replacedText = selectedText.replace(/(https?|ftp|file):\/\/[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]/g, function (t) {
                    return decodeURI(t);
                }); // .replace(/ /g, "%20");
                break;
            case "hyphen":
                replacedText = selectedText.replace(/(\w)-[ ]/g, "");
                break;
            case "array2table":
                replacedText = array2markdown(selectedText);
                break;
            case "table2bullet":
                replacedText = table2bullet(selectedText, false);
                break;
            case "table2bullet-header":
                replacedText = table2bullet(selectedText, true);
                break;
            case "remove-wiki-link":
                replacedText = removeWikiLink(selectedText);
                break;
            case "remove-url-link":
                replacedText = removeUrlLink(selectedText);
                break;
            case "link-url2wiki":
                replacedText = url2WikiLink(selectedText);
                break;
            default:
                return;
        }
        const fos = editor.posToOffset(editor.getCursor("from"));
        // change text only when two viable is different
        if (replacedText != selectedText) {
            editor.replaceSelection(replacedText);
        }
        if (cmd != "merge") {
            const tos = editor.posToOffset(editor.getCursor("to")); // to offset
            editor.setSelection(editor.offsetToPos(tos - replacedText.length), editor.offsetToPos(tos));
        }
        else {
            let head = editor.getCursor("head");
            editor.setSelection(editor.offsetToPos(fos), head);
        }
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = TextFormat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
