/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class NoteRenamer {
    constructor(app, finder) {
        this.app = app;
        this.finder = finder;
    }
    renameNote(file, newName) {
        return __awaiter(this, void 0, void 0, function* () {
            const newBasePath = file.basename.replace(file.basename, newName);
            const children = this.finder.findChildren(file);
            const newNotesNames = children.map((f) => {
                return {
                    file: f,
                    newPath: f.path.replace(file.basename, newBasePath),
                };
            });
            for (const f of newNotesNames) {
                yield this.app.fileManager.renameFile(f.file, f.newPath);
            }
            yield this.app.fileManager.renameFile(file, file.path.replace(file.basename, newBasePath));
        });
    }
}

const getFullPathWithoutExtension = (path) => {
    const extLength = path.split('.').pop().length + 1;
    return path.slice(0, path.length - extLength);
};
class NoteFinder {
    constructor(app) {
        this.app = app;
    }
    findChildren(file) {
        const allNotes = this.findNotes();
        return allNotes.filter((n) => {
            return (n.path.includes(file.path.slice(0, file.path.length - 3)) &&
                n.parent == file.parent &&
                n != file);
        });
    }
    findParents(file) {
        const allNotes = this.findNotes();
        return allNotes.filter((n) => {
            return (getFullPathWithoutExtension(file.path).startsWith(getFullPathWithoutExtension(n.path)) &&
                n.parent == file.parent &&
                n != file);
        });
    }
    findNotes() {
        return this.app.vault.getMarkdownFiles();
    }
    getParentName(file) {
        const noteNamePath = file.basename.split('.');
        if (noteNamePath.length > 1) {
            noteNamePath.pop();
            return noteNamePath.join('.');
        }
        return null;
    }
}

class NoteRenameModal extends obsidian.Modal {
    constructor(app, file, noteRenamer) {
        super(app);
        this.file = file;
        this.noteRenamer = noteRenamer;
        this.open();
    }
    rename() {
        return __awaiter(this, void 0, void 0, function* () {
            const file = this.app.workspace.getActiveFile();
            yield this.noteRenamer.renameNote(file, this.inputField.getValue());
            this.close();
        });
    }
    onOpen() {
        let { contentEl } = this;
        this.titleEl.setText(`Rename note: "${this.file.basename}"`);
        this.inputField = new obsidian.TextComponent(contentEl).setValue(this.file.basename);
        this.inputField.inputEl.addEventListener('keypress', (keypressed) => __awaiter(this, void 0, void 0, function* () {
            if (keypressed.key === 'Enter') {
                yield this.rename();
            }
        }));
        this.inputField.inputEl.className = 'prompt-input';
        this.modalEl.className = 'prompt';
        this.inputField.inputEl.focus();
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

class NoteFinderModal extends obsidian.FuzzySuggestModal {
    constructor(app, noteOpener, items) {
        super(app);
        this.noteOpener = noteOpener;
        this.items = items;
        this.open();
    }
    getItemText(item) {
        return item;
    }
    getItems() {
        return this.items.map((f) => f.basename);
    }
    onChooseItem(item, evt) {
        this.noteOpener.openNote(this.items.find((f) => f.basename == item));
    }
    onClose() {
        super.onClose();
    }
}

class NoteCreateModal extends obsidian.SuggestModal {
    constructor(app, noteCreator, noteOpener, noteFinder, file) {
        super(app);
        this.noteCreator = noteCreator;
        this.noteOpener = noteOpener;
        this.noteFinder = noteFinder;
        this.file = file;
        this.emptyText = 'Empty text (replace with nothing)';
        this.notes = this.noteFinder.findNotes().map((f) => f.basename);
        if (file) {
            this.inputEl.value = file.basename;
        }
        this.open();
    }
    getSuggestions(query) {
        let items = [query];
        items.push(...this.notes.filter((i) => i.toLocaleLowerCase().includes(query.toLocaleLowerCase())));
        return items;
    }
    selectSuggestion(value, evt) {
        if (!this.notes.find((n) => n == value)) {
            super.selectSuggestion(value, evt);
            return;
        }
        this.inputEl.value = value;
    }
    renderSuggestion(value, el) {
        el.innerText = value;
    }
    onChooseSuggestion(item, _) {
        return __awaiter(this, void 0, void 0, function* () {
            let filePath = item + '.md';
            if (this.file) {
                filePath = this.file.parent.path + '/' + filePath;
            }
            let file = yield this.noteCreator.createWithTemplate(filePath, item);
            yield this.noteOpener.openNote(file);
        });
    }
}

class Actions {
    constructor(app, settings, finder, noteRenamer, noteOpener, noteCreator) {
        this.app = app;
        this.settings = settings;
        this.finder = finder;
        this.noteRenamer = noteRenamer;
        this.noteOpener = noteOpener;
        this.noteCreator = noteCreator;
        this.onCreate = () => {
            const file = this.app.workspace.getActiveFile();
            new NoteCreateModal(this.app, this.noteCreator, this.noteOpener, this.finder, file);
        };
        this.onRename = () => {
            const file = this.app.workspace.getActiveFile();
            if (file != null) {
                new NoteRenameModal(this.app, file, this.noteRenamer);
            }
        };
        this.onGetChild = () => {
            const file = this.app.workspace.getActiveFile();
            if (file != null) {
                const children = this.finder.findChildren(file);
                new NoteFinderModal(this.app, this.noteOpener, children).open();
            }
        };
        this.onGetParent = () => {
            const file = this.app.workspace.getActiveFile();
            if (file != null) {
                const parents = this.finder.findParents(file);
                new NoteFinderModal(this.app, this.noteOpener, parents).open();
            }
        };
        this.onOpenParent = () => __awaiter(this, void 0, void 0, function* () {
            const file = this.app.workspace.getActiveFile();
            if (file != null) {
                const parentNoteName = this.finder.getParentName(file);
                if (parentNoteName !== null) {
                    const parents = this.finder.findParents(file);
                    const parentFile = parents.find((f) => f.basename == parentNoteName);
                    if (parentFile) {
                        yield this.noteOpener.openNote(parentFile);
                    }
                    else {
                        yield this.noteOpener.openNote(yield this.noteCreator.createParentNote(file, parentNoteName));
                    }
                }
                else {
                    new obsidian.Notice('Root node');
                }
            }
        });
    }
}

class SettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Structured plugin settings' });
        new obsidian.Setting(containerEl)
            .setName('Open notes in split view')
            .setDesc('If disabled: open in current tab')
            .addToggle((v) => v
            .setValue(this.plugin.settings.openInSplit)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.openInSplit = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Create parent')
            .setDesc('Create parent if not exists')
            .addToggle((v) => v
            .setValue(this.plugin.settings.createParent)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.createParent = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName('Path to template')
            .setDesc('Template for new note (navigating to parent). Available variables: {{NoteName}}')
            .addText((v) => v
            .setValue(this.plugin.settings.templatePath)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.templatePath = value;
            yield this.plugin.saveSettings();
        })));
    }
}

const DEFAULT_SETTINGS = {
    openInSplit: true,
    createParent: true,
    templatePath: '',
};

class NoteOpener {
    constructor(app, settings) {
        this.app = app;
        this.settings = settings;
        this.openNoteInSplit = (file) => __awaiter(this, void 0, void 0, function* () {
            const view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
            const leaf = this.app.workspace.createLeafBySplit(view.leaf);
            yield leaf.openFile(file);
            this.app.workspace.setActiveLeaf(leaf);
        });
        this.openNote = (file) => __awaiter(this, void 0, void 0, function* () {
            if (this.settings.openInSplit) {
                yield this.openNoteInSplit(file);
            }
            else {
                const view = this.app.workspace.getActiveViewOfType(obsidian.MarkdownView);
                yield view.leaf.openFile(file);
            }
        });
    }
}

class NoteCreator {
    constructor(app, settings) {
        this.app = app;
        this.settings = settings;
        this.createWithTemplate = (filePath, noteName) => __awaiter(this, void 0, void 0, function* () {
            const newFile = this.app.vault.getAbstractFileByPath(obsidian.normalizePath(this.settings.templatePath));
            let content;
            if (this.settings.templatePath) {
                if (newFile && newFile instanceof obsidian.TFile) {
                    content = yield this.app.vault.cachedRead(newFile);
                    content = content.replace(new RegExp('{{NoteName}}', 'g'), noteName);
                }
                else {
                    content = '';
                }
            }
            let filePathNormalized = obsidian.normalizePath(filePath);
            return this.app.vault.create(filePathNormalized, content);
        });
        this.createParentNote = (currentFile, parentNoteName) => __awaiter(this, void 0, void 0, function* () {
            if (this.settings.createParent) {
                new obsidian.Notice('Parent does not exists. Create new one');
                const parentFilePath = obsidian.normalizePath(currentFile.parent.path + '/' + parentNoteName + '.md');
                return this.createWithTemplate(parentFilePath, parentNoteName);
            }
            else {
                new obsidian.Notice('Parent does not exists.');
            }
        });
    }
}

class StructurePlugin extends obsidian.Plugin {
    constructor(app, manifest) {
        super(app, manifest);
        this.addCommands = () => {
            const noteOpener = new NoteOpener(this.app, this.settings);
            const noteCreator = new NoteCreator(this.app, this.settings);
            const actions = new Actions(this.app, this.settings, this.finder, this.noteRenamer, noteOpener, noteCreator);
            this.addCommand({
                id: 'renameNote',
                name: 'Rename current note',
                callback: actions.onRename,
            });
            this.addCommand({
                id: 'createNote',
                name: 'Create a note',
                callback: actions.onCreate,
            });
            this.addCommand({
                id: 'getChildrenNotes',
                name: 'Get children notes',
                callback: actions.onGetChild,
            });
            this.addCommand({
                id: 'getParentNotes',
                name: 'Get parents notes',
                callback: actions.onGetParent,
            });
            this.addCommand({
                id: 'openParentNotes',
                name: 'Open parent note',
                callback: actions.onOpenParent,
            });
            // this.addCommand({
            //     id: 'reloadPlugin',
            //     name: 'Reload Plugin (dev)',
            //     callback: async () => {
            //         // @ts-ignore - for this.app.plugins
            //         const id: string = this.manifest.id, plugins = this.app.plugins
            //         plugins.disablePlugin(id).then(() => plugins.enablePlugin(id))
            //     },
            // })
        };
        this.finder = new NoteFinder(app);
        this.noteRenamer = new NoteRenamer(app, this.finder);
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            this.addSettingTab(new SettingTab(this.app, this));
            this.addCommands();
        });
    }
    onunload() { }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
            this.addCommands();
        });
    }
}

module.exports = StructurePlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
