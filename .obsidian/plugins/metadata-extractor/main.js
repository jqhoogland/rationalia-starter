/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD.
If you want to view the source, visit the plugin's github repository:
https://github.com/kometenstaub/metadata-extractor

The plugin is MIT-licensed:

    MIT License

    Copyright (c) 2021-2022 kometenstaub

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

*/

var E=Object.create;var F=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var C=n=>F(n,"__esModule",{value:!0});var J=(n,i)=>{C(n);for(var e in i)F(n,e,{get:i[e],enumerable:!0})},D=(n,i,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let t of A(i))!j.call(n,t)&&t!=="default"&&F(n,t,{get:()=>i[t],enumerable:!(e=L(i,t))||e.enumerable});return n},b=n=>D(C(F(n!=null?E(I(n)):{},"default",n&&n.__esModule&&"default"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);J(exports,{default:()=>S});var N=b(require("obsidian"));var h=b(require("obsidian")),k=b(require("fs"));function y(n){let i=new Blob([n],{type:"text/javascript"}),e=URL.createObjectURL(i),t=new Worker(e);return URL.revokeObjectURL(e),t}function T(){return y(`self.onmessage=function(l){let c=l.data[0],i=l.data[1],s=c;c.forEach(n=>{let f=n.fileName,k=n.relativePath;s.forEach(t=>{f!==t.fileName&&t.links&&t.links.forEach(a=>{let e={};a.relativePath===k&&(e.fileName=t.fileName,e.link=a.link,e.relativePath=t.relativePath,a.cleanLink&&(e.cleanLink=a.cleanLink),a.displayText&&(e.displayText=a.displayText),i.push(e))})}),i.length>0&&(n.backlinks=i),i=[]}),self.postMessage(c)};
`)}function O(n,i){let e=[];for(let r of i)r.name.slice(-3)!==".md"&&e.push(r);return q(n,e)}function q(n,i){let e={};return i.length>0?Object.assign(e,{folders:n,nonMdFiles:i}):Object.assign(e,{folders:n}),e}function W(n){let i=[],e=[];for(let t of n)t instanceof h.TFolder?i.push({name:t.name,relativePath:t.path}):t instanceof h.TFile&&e.push({name:t.name,basename:t.basename,relativePath:t.path});return{folders:i,files:e}}var x=class{constructor(i,e){this.plugin=i,this.app=e}getAbsolutePath(i){let e;if(this.app.vault.adapter instanceof h.FileSystemAdapter)e=this.app.vault.adapter.getBasePath();else throw new Error("Cannot determine base path.");let t=`${this.app.vault.configDir}/plugins/metadata-extractor/${i}`;return`${e}/${t}`}getUniqueTags(i){let e=[],t=(0,h.getAllTags)(i);return t&&(e=t),e=e.map(r=>r.slice(1).toLowerCase()),e=Array.from(new Set(e)),e}writeAllExceptMd(i){let e=this.plugin.settings.allExceptMdPath;this.plugin.settings.allExceptMdPath||(e=this.getAbsolutePath(i));let t=this.app.vault.getAllLoadedFiles(),{folders:r,files:d}=W(t),g=O(r,d);(0,k.writeFileSync)(e,JSON.stringify(g,null,2)),this.plugin.settings.consoleLog&&console.log("Metadata Extractor plugin: wrote the allExceptMd JSON file")}createCleanFrontmatter(i){let e=Object.assign({},i);return e.aliases&&delete e.aliases,e.tags&&delete e.tags,e}writeTagsToJSON(i){let e=this.app.metadataCache.getTags();if(Object.keys(e).length===0){let a="There are no tags in your vault.";if(this.plugin.settings.consoleLog){console.log(a);return}else return}let t=this.plugin.settings.tagPath;this.plugin.settings.tagPath||(t=this.getAbsolutePath(i));let r=[];for(let a of this.app.vault.getMarkdownFiles()){let l,s=this.app.metadataCache.getFileCache(a);s&&(l=s);let o=a.path,m=this.getUniqueTags(l);m.length!==0&&r.push({name:o,tags:m})}let g=r.map(a=>a.tags).reduce((a,l)=>a.concat(l.map(s=>s.toLowerCase()))),f=Array.from(new Set(g)),w=this.app.metadataCache.getTags(),c={};for(let[a,l]of Object.entries(w)){let s=a.slice(1).toLowerCase();c[s]=l}let p=[];for(let a of f){let l=[];for(let o of r)o.tags.contains(a)&&l.push(o.name);let s=c[a];p.push({tag:a,tagCount:s,relativePaths:l})}(0,k.writeFileSync)(t,JSON.stringify(p,null,2)),this.plugin.settings.consoleLog&&console.log("Metadata Extractor plugin: wrote the tagToFile JSON file")}writeCacheToJSON(i){let e=this.plugin.settings.metadataPath;this.plugin.settings.metadataPath||(e=this.getAbsolutePath(i));let t=[];for(let g of this.app.vault.getMarkdownFiles()){let f=g.basename,w=g.path,c,p=this.app.metadataCache.getFileCache(g);if(p)c=p;else{this.plugin.settings.consoleLog&&console.log(`No cache for file: ${g.path}`);continue}let a,l=[],s={};s.fileName=f,s.relativePath=w;let o=this.getUniqueTags(c);o&&o.length>0&&(s.tags=o),c.frontmatter&&(s.frontmatter=this.createCleanFrontmatter(c.frontmatter),a=(0,h.parseFrontMatterAliases)(c.frontmatter),a&&a.length>0&&(s.aliases=a)),c.headings&&(c.headings.forEach(v=>{l.push({heading:v.heading,level:v.level})}),s.headings=l);let m=B(c,s,w,f,this.app,g);Object.assign(s,m),Object.keys(s).length>0&&t.push(s)}let r=[],d=T();d.postMessage([t,r]),d.onerror=g=>{new h.Notice("Something went wrong with the backlinks calculation.")},d.onmessage=g=>{t=g.data,(0,k.writeFileSync)(e,JSON.stringify(t,null,2)),this.plugin.settings.consoleLog&&console.log("Metadata Extractor plugin: wrote the metadata JSON file"),d.terminate()}}setWritingSchedule(i,e,t){if(this.plugin.settings.writingFrequency!=="0"){let d=parseInt(this.plugin.settings.writingFrequency)*6e4;window.clearInterval(this.plugin.intervalId1),this.plugin.intervalId1=void 0,this.plugin.intervalId1=window.setInterval(()=>this.writeTagsToJSON(i),d),this.plugin.registerInterval(this.plugin.intervalId1),window.clearInterval(this.plugin.intervalId2),this.plugin.intervalId2=void 0,this.plugin.intervalId2=window.setInterval(()=>this.writeCacheToJSON(e),d),this.plugin.registerInterval(this.plugin.intervalId2),window.clearInterval(this.plugin.intervalId3),this.plugin.intervalId3=void 0,this.plugin.intervalId3=window.setInterval(()=>this.writeAllExceptMd(t),d),this.plugin.registerInterval(this.plugin.intervalId3)}else this.plugin.settings.writingFrequency==="0"&&(window.clearInterval(this.plugin.intervalId1),window.clearInterval(this.plugin.intervalId2),window.clearInterval(this.plugin.intervalId3))}};function B(n,i,e,t,r,d){let g=[],f=[];w();function w(){let p=[],a=[];n.links&&(p=n.links),n.embeds&&(a=n.embeds.filter(l=>{let s=l.link,o=(0,h.getLinkpath)(s);if(r.metadataCache.getFirstLinkpathDest(o,d.path))return l})),f=p.concat(a),c()}function c(){for(let p of f){let a=p.link,l="",s={};typeof p.displayText!="undefined"&&(l=p.displayText);let o=r.metadataCache.getFirstLinkpathDest((0,h.getLinkpath)(a),d.path);if(!(o&&o.path.slice(-3).toLowerCase()!==".md")){if(a.includes("/")&&(a=a.split("/").last()),!a.includes("#"))s.link=a,l!==a&&(s.displayText=l),o&&(s.relativePath=o.path);else if(a.includes("#")&&a.charAt(0)!=="#"){let m=l,v=(0,h.getLinkpath)(a);s.link=a,s.cleanLink=v,(!l.includes("#")||!l.includes(">"))&&(s.displayText=m),o&&(s.relativePath=o.path)}else a.charAt(0)==="#"&&(s.link=a,s.relativePath=e,s.cleanLink=t,a!==l&&(s.displayText=l));g.push(s)}}g.length>0&&(i.links=g)}return i}var u=b(require("obsidian")),P={tagPath:"",metadataPath:"",allExceptMdPath:"",tagFile:"tags.json",metadataFile:"metadata.json",allExceptMdFile:"allExceptMd.json",writingFrequency:"0",writeFilesOnLaunch:!1,consoleLog:!1},M=class extends u.PluginSettingTab{constructor(i,e){super(i,e);this.plugin=e}display(){let{containerEl:i}=this;i.empty(),i.createEl("h2",{text:"Metadata Extractor Settings"}),new u.Setting(i).setName("File-write path for tags").setDesc("Where the tag-to-file-names JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/tags.json").setValue(this.plugin.settings.tagPath).onChange(async t=>{this.plugin.settings.tagPath=t,await this.plugin.saveSettings()})),new u.Setting(i).setName("File name of tag-to-file-names JSON").setDesc("Requires the .json extension. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("tags.json").setValue(this.plugin.settings.tagFile).onChange(async t=>{this.plugin.settings.tagFile=t,await this.plugin.saveSettings()})),new u.Setting(i).setName("File-write path for metadata").setDesc("Where the metadata JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/metadata.json").setValue(this.plugin.settings.metadataPath).onChange(async t=>{this.plugin.settings.metadataPath=t,await this.plugin.saveSettings()})),new u.Setting(i).setName("File name of metadata JSON").setDesc("Requires the .json extension; leave empty if setting above was changed. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("metadata.json").setValue(this.plugin.settings.metadataFile).onChange(async t=>{this.plugin.settings.metadataFile=t,await this.plugin.saveSettings()})),new u.Setting(i).setName("File-write path of allExceptMd JSON").setDesc("Where the allExceptMd JSON file will be saved. Requires the file name with extension. 			If this is filled in, the setting below won't have any effect.").addText(e=>e.setPlaceholder("/home/user/Downloads/allExceptMd.json").setValue(this.plugin.settings.allExceptMdPath).onChange(async t=>{this.plugin.settings.allExceptMdPath=t,await this.plugin.saveSettings()})),new u.Setting(i).setName("File name of allExceptMd JSON").setDesc("Requires the .json extension; leave empty if setting above was changed. 			Only change this setting if you want to change the name of the saved json in the plugin folder.").addText(e=>e.setPlaceholder("metadata.json").setValue(this.plugin.settings.allExceptMdFile).onChange(async t=>{this.plugin.settings.allExceptMdFile=t,await this.plugin.saveSettings()})),new u.Setting(i).setName("Configure frequency for writing the three JSON files").setDesc("The frequency has to be entered in minutes. Set it to 0 to disable the periodic writing.").addText(e=>e.setPlaceholder("120").setValue(this.plugin.settings.writingFrequency).onChange(async t=>{t===""?this.plugin.settings.writingFrequency="0":this.plugin.settings.writingFrequency=t,await this.plugin.saveSettings(),this.plugin.methods.setWritingSchedule(this.plugin.settings.tagFile,this.plugin.settings.metadataFile,this.plugin.settings.allExceptMdFile)})),new u.Setting(i).setName("Write JSON files automatically when Obsidian launches").setDesc("If enabled, the JSON files will be written each time Obsidian starts.").addToggle(e=>{e.setValue(this.plugin.settings.writeFilesOnLaunch).onChange(t=>{this.plugin.settings.writeFilesOnLaunch=t,this.plugin.saveSettings()})}),new u.Setting(i).setName("Show console logs").setDesc("Only enable this for debugging purposes.").addToggle(e=>{e.setValue(this.plugin.settings.consoleLog).onChange(t=>{this.plugin.settings.consoleLog=t,this.plugin.saveSettings()})})}};var S=class extends N.Plugin{constructor(){super(...arguments);this.intervalId1=void 0;this.intervalId2=void 0;this.intervalId3=void 0;this.methods=new x(this,this.app)}async onload(){console.log("loading Metadata Extractor plugin"),await this.loadSettings(),this.addCommand({id:"write-tags-json",name:"Write JSON file with tags and associated file names to disk.",callback:()=>{this.methods.writeTagsToJSON(this.settings.tagFile)}}),this.addCommand({id:"write-metadata-json",name:"Write JSON file with metadata to disk.",callback:()=>{this.methods.writeCacheToJSON(this.settings.metadataFile)}}),this.addCommand({id:"write-allExceptMd-json",name:"Write JSON file with all folders and non-MD files to disk.",callback:()=>{this.methods.writeAllExceptMd(this.settings.allExceptMdFile)}}),this.addSettingTab(new M(this.app,this)),this.settings.writeFilesOnLaunch&&this.app.workspace.onLayoutReady(()=>{this.methods.writeTagsToJSON(this.settings.tagFile),this.methods.writeCacheToJSON(this.settings.metadataFile),this.methods.writeAllExceptMd(this.settings.allExceptMdFile)}),this.methods.setWritingSchedule(this.settings.tagFile,this.settings.metadataFile,this.settings.allExceptMdFile)}onunload(){console.log("unloading Metadata Extractor plugin")}async loadSettings(){this.settings=Object.assign({},P,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}};0&&(module.exports={});
